package org.formentor.magnolia.ai.infrastructure.openai.api;

import lombok.Data;

import java.util.List;
import java.util.Map;

/**
 * An object containing a response from the completion api
 */
@Data
public class CompletionResult {
    /**
     * A unique id assigned to this completion.
     */
    String id;

    /**
     * The type of object returned, should be "text_completion"
     */
    String object;

    /**
     * The creation time in epoch seconds.
     */
    long created;

    /**
     * The GPT-3 model used.
     */
    String model;

    /**
     * A list of generated completions.
     */
    List<CompletionChoice> choices;

    /**
     * The API usage for this request
     */
    Usage usage;

    /**
     * A completion generated by GPT-3
     */
    @Data
    public static class CompletionChoice {
        /**
         * The generated text. Will include the prompt if {@link CompletionRequest#echo } is true
         */
        String text;

        /**
         * This index of this completion in the returned list.
         */
        Integer index;

        /**
         * The log probabilities of the chosen tokens and the top {@link CompletionRequest#logprobs} tokens
         */
        LogProbResult logprobs;

        /**
         * The reason why GPT-3 stopped generating, for example "length".
         */
        String finish_reason;
    }

    /**
     * Log probabilities of different token options
     * Returned if {@link CompletionRequest#logprobs} is greater than zero
     */
    @Data
    public static class LogProbResult {

        /**
         * The tokens chosen by the completion api
         */
        List<String> tokens;

        /**
         * The log probability of each token in {@link LogProbResult#tokens}
         */
        List<Double> tokenLogprobs;

        /**
         * A map for each index in the completion result.
         * The map contains the top {@link CompletionRequest#logprobs} tokens and their probabilities
         */
        List<Map<String, Double>> topLogprobs;

        /**
         * The character offset from the start of the returned text for each of the chosen tokens.
         */
        List<Integer> textOffset;
    }

    /**
     * The OpenAI resources used by a request
     */
    @Data
    public static class Usage {
        /**
         * The number of prompt tokens used.
         */
        long prompt_tokens;

        /**
         * The number of completion tokens used.
         */
        long completion_tokens;

        /**
         * The number of total tokens used
         */
        long total_tokens;
    }
}